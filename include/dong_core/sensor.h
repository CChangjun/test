// Generated by gencpp from file dong_core/sensor.msg
// DO NOT EDIT!


#ifndef DONG_CORE_MESSAGE_SENSOR_H
#define DONG_CORE_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dong_core
{
template <class ContainerAllocator>
struct sensor_
{
  typedef sensor_<ContainerAllocator> Type;

  sensor_()
    : left_encoder(0.0)
    , right_encoder(0.0)
    , yaw_angle(0.0)
    , quest(false)  {
    }
  sensor_(const ContainerAllocator& _alloc)
    : left_encoder(0.0)
    , right_encoder(0.0)
    , yaw_angle(0.0)
    , quest(false)  {
  (void)_alloc;
    }



   typedef double _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef double _right_encoder_type;
  _right_encoder_type right_encoder;

   typedef double _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef uint8_t _quest_type;
  _quest_type quest;





  typedef boost::shared_ptr< ::dong_core::sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dong_core::sensor_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_

typedef ::dong_core::sensor_<std::allocator<void> > sensor;

typedef boost::shared_ptr< ::dong_core::sensor > sensorPtr;
typedef boost::shared_ptr< ::dong_core::sensor const> sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dong_core::sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dong_core::sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dong_core::sensor_<ContainerAllocator1> & lhs, const ::dong_core::sensor_<ContainerAllocator2> & rhs)
{
  return lhs.left_encoder == rhs.left_encoder &&
    lhs.right_encoder == rhs.right_encoder &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.quest == rhs.quest;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dong_core::sensor_<ContainerAllocator1> & lhs, const ::dong_core::sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dong_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dong_core::sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dong_core::sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dong_core::sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dong_core::sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dong_core::sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dong_core::sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dong_core::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e51394dd57ce1e429a6d473451795f5";
  }

  static const char* value(const ::dong_core::sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e51394dd57ce1e4ULL;
  static const uint64_t static_value2 = 0x29a6d473451795f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dong_core::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dong_core/sensor";
  }

  static const char* value(const ::dong_core::sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dong_core::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 left_encoder\n"
"float64 right_encoder\n"
"float64 yaw_angle\n"
"\n"
"bool quest\n"
"\n"
;
  }

  static const char* value(const ::dong_core::sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dong_core::sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
      stream.next(m.yaw_angle);
      stream.next(m.quest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dong_core::sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dong_core::sensor_<ContainerAllocator>& v)
  {
    s << indent << "left_encoder: ";
    Printer<double>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<double>::stream(s, indent + "  ", v.right_encoder);
    s << indent << "yaw_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "quest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DONG_CORE_MESSAGE_SENSOR_H
